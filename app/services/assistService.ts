// services/assistanceService.ts
import { getFirebaseToken, db } from "./firebaseConfig";
import { Assistance } from "../models/Assistance";
import { doc, getDoc } from "firebase/firestore";

export const BASE_API_URL = "http://192.168.1.190:7595/api";

/**
 * üî• Envoie une demande d'assistance PMR au backend
 */
export const creerReservationAssistance = async (token: string, reservationData: any) => {
    try {
        const response = await fetch(`${BASE_API_URL}/Reservation/demande-assistance`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify(reservationData)
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "Erreur lors de la cr√©ation de la r√©servation");
        }

        console.log("‚úÖ R√©servation r√©ussie :", data);
        return data;
    } catch (error) {
        console.error("‚ùå Erreur cr√©ation r√©servation :", error);
        return null;
    }
};

/**
 * üî• R√©cup√®re tous les trajets disponibles
 */
export const fetchAllAssistances = async (): Promise<Assistance[]> => {
    try {
        const token = await getFirebaseToken();
        if (!token) throw new Error("Impossible de r√©cup√©rer le token Firebase.");

        const response = await fetch(`${BASE_API_URL}/Reservation/all-reservations`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        console.log(`
            curl --location '${BASE_API_URL}/Reservation/all-reservations' \\
            --header 'Content-Type: application/json' \\
            --header 'Authorization: Bearer ${token}' \\'
        `);

        console.log("üîç R√©ponse brute API :", response);

        if (!response.ok) throw new Error("Erreur de r√©cup√©ration des r√©servations.");
        const reservations = await response.json();
        console.log("üöÄ R√©servations re√ßues :", reservations);

        // ‚úÖ Fonction pour √©viter les erreurs d'acc√®s aux cl√©s undefined
        const safeGet = (obj: any, key: string, defaultValue: string = "Inconnu") => {
            return obj && obj[key] !== undefined ? obj[key] : defaultValue;
        };

        const assistanceData = await Promise.all(
            reservations.map(async (reservation: any) => {
                console.log("üöÄ R√©servation en cours de traitement :", reservation);

                // ‚úÖ V√©rification de `Nom` et `Prenom`
                if (!reservation.nom || !reservation.prenom) {
                    console.warn(`‚ö†Ô∏è R√©servation sans nom/pr√©nom, ignor√©e :`, reservation);
                    return null;
                }

                try {
                    return {
                        id: safeGet(reservation, "id"),
                        numeroMMT: safeGet(reservation, "numeroMMT"),
                        pmrName: `${safeGet(reservation, "nom")} ${safeGet(reservation, "prenom")}`,
                        departure: safeGet(reservation, "lieuDepart"),
                        destination: safeGet(reservation, "lieuArrivee"), // üõ† Correction ici
                        typeTransport: safeGet(reservation, "typeTransport"), // üõ† Correction ici
                        time: safeGet(reservation, "dateHeureDepart"),
                        arrivalTime: safeGet(reservation, "dateHeureArrivee"),
                        duration: safeGet(reservation, "dureeTotaleEnSecondes"), // üõ† Correction ici
                        distance: safeGet(reservation, "distanceTotale"), // üõ† Correction ici
                        assistancePMR: safeGet(reservation, "assistancePMR"),
                        handicapType: safeGet(reservation, "typeHandicap"),
                        price: safeGet(reservation, "prix"), // üõ† Correction ici
                        sections: reservation.sections?.map((section: any) => ({
                            modeTransport: safeGet(section, "modeTransport"),
                            depart: safeGet(section, "depart"),
                            arrivee: safeGet(section, "arrivee"),
                            price: safeGet(section, "prix"),
                            departureTime: safeGet(section, "dateHeureDepart"),
                            arrivalTime: safeGet(section, "dateHeureArrivee"),
                        })) || [],
                        status: "en attente", // Ajout d'un statut par d√©faut
                    };
                } catch (error) {
                    console.error(`‚ùå Erreur lors du traitement de la r√©servation :`, error);
                    return null;
                }
            })
        );

        return assistanceData.filter((item) => item !== null) as Assistance[];
    } catch (error) {
        console.error("‚ùå Erreur API:", error);
        return [];
    }
};

/**
 * üî• Accepter une r√©servation (Agent)
 */
export const accepterReservation = async (reservationId: number) => {
    try {
        const token = await getFirebaseToken();
        if (!token) throw new Error("üî¥ Impossible de r√©cup√©rer le token Firebase.");

        const url = `${BASE_API_URL}/Reservation/accepter-reservation/${reservationId}/${token}`;
        console.log(`üöÄ Envoi de la requ√™te POST : ${url}`);

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        });

        const text = await response.text();  // Lire le texte brut avant de parser
        console.log(`üîç R√©ponse brute :`, text);

        if (!response.ok) {
            console.error(`‚ùå Erreur API : ${response.status} ${response.statusText}`);
            throw new Error(`Erreur lors de l'acceptation : ${text}`);
        }

        const data = JSON.parse(text); // Maintenant on parse en JSON
        console.log("‚úÖ R√©servation accept√©e :", data);
        return data;
    } catch (error) {
        console.error("‚ùå Erreur acceptation :", error);
        return null;
    }
};


/**
 * üî• Annuler une r√©servation en tant que PMR
 */
export const annulerReservationPMR = async (reservationId: number) => {
    try {
        const token = await getFirebaseToken();
        if (!token) throw new Error("üî¥ Impossible de r√©cup√©rer le token Firebase.");

        const response = await fetch(`${BASE_API_URL}/Reservation/annuler-reservation/${reservationId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "Erreur lors de l'annulation de la r√©servation.");

        console.log("üöÄ R√©servation annul√©e :", data);
        return data;
    } catch (error) {
        console.error("‚ùå Erreur annulation PMR :", error);
        return null;
    }
};

/**
 * üî• Lib√©rer une r√©servation accept√©e par un agent
 */
export const libererReservation = async (reservationId: number) => {
    try {
        const token = await getFirebaseToken();
        if (!token) throw new Error("üî¥ Impossible de r√©cup√©rer le token Firebase.");

        const response = await fetch(`${BASE_API_URL}/Reservation/liberer-reservation/${reservationId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "Erreur lors de la lib√©ration de la r√©servation.");

        console.log("üîÑ R√©servation lib√©r√©e :", data);
        return data;
    } catch (error) {
        console.error("‚ùå Erreur lib√©ration agent :", error);
        return null;
    }
};


/**
 * üî• Terminer une r√©servation (Mission termin√©e)
 */
export const terminerReservation = async (reservationId: number) => {
    try {
        const token = await getFirebaseToken();
        if (!token) throw new Error("üî¥ Impossible de r√©cup√©rer le token Firebase.");

        const response = await fetch(`${BASE_API_URL}/Reservation/terminer-reservation/${reservationId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "Erreur lors de la finalisation.");

        console.log("‚úÖ R√©servation termin√©e :", data);
        return data;
    } catch (error) {
        console.error("‚ùå Erreur finalisation :", error);
        return null;
    }
};
